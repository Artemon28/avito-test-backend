// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	structures "avito-test-backend/internal/structures"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserInterface is a mock of UserInterface interface.
type MockUserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserInterfaceMockRecorder
}

// MockUserInterfaceMockRecorder is the mock recorder for MockUserInterface.
type MockUserInterfaceMockRecorder struct {
	mock *MockUserInterface
}

// NewMockUserInterface creates a new mock instance.
func NewMockUserInterface(ctrl *gomock.Controller) *MockUserInterface {
	mock := &MockUserInterface{ctrl: ctrl}
	mock.recorder = &MockUserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInterface) EXPECT() *MockUserInterfaceMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockUserInterface) Balance(userid int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", userid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance.
func (mr *MockUserInterfaceMockRecorder) Balance(userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockUserInterface)(nil).Balance), userid)
}

// Book mocks base method.
func (m *MockUserInterface) Book(userid, bookamount int) (structures.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Book", userid, bookamount)
	ret0, _ := ret[0].(structures.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Book indicates an expected call of Book.
func (mr *MockUserInterfaceMockRecorder) Book(userid, bookamount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Book", reflect.TypeOf((*MockUserInterface)(nil).Book), userid, bookamount)
}

// Deposit mocks base method.
func (m *MockUserInterface) Deposit(fromuserid, userid, orderid, serviceid, amount int) (structures.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", fromuserid, userid, orderid, serviceid, amount)
	ret0, _ := ret[0].(structures.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockUserInterfaceMockRecorder) Deposit(fromuserid, userid, orderid, serviceid, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockUserInterface)(nil).Deposit), fromuserid, userid, orderid, serviceid, amount)
}

// Report mocks base method.
func (m *MockUserInterface) Report(month, year int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", month, year)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Report indicates an expected call of Report.
func (mr *MockUserInterfaceMockRecorder) Report(month, year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockUserInterface)(nil).Report), month, year)
}

// Transactions mocks base method.
func (m *MockUserInterface) Transactions(userid int, sortOrder string) ([]structures.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transactions", userid, sortOrder)
	ret0, _ := ret[0].([]structures.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transactions indicates an expected call of Transactions.
func (mr *MockUserInterfaceMockRecorder) Transactions(userid, sortOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transactions", reflect.TypeOf((*MockUserInterface)(nil).Transactions), userid, sortOrder)
}

// UnBook mocks base method.
func (m *MockUserInterface) UnBook(userid, bookamount int) (structures.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnBook", userid, bookamount)
	ret0, _ := ret[0].(structures.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnBook indicates an expected call of UnBook.
func (mr *MockUserInterfaceMockRecorder) UnBook(userid, bookamount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnBook", reflect.TypeOf((*MockUserInterface)(nil).UnBook), userid, bookamount)
}

// Withdraw mocks base method.
func (m *MockUserInterface) Withdraw(userid, touserId, orederid, serviceid, amount int) (structures.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", userid, touserId, orederid, serviceid, amount)
	ret0, _ := ret[0].(structures.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockUserInterfaceMockRecorder) Withdraw(userid, touserId, orederid, serviceid, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockUserInterface)(nil).Withdraw), userid, touserId, orederid, serviceid, amount)
}
