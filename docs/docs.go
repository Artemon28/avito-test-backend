// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Artemiy Chaykov"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/balance/{id}": {
            "get": {
                "description": "get active balance of the user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User account"
                ],
                "summary": "balance",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structures.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/book": {
            "put": {
                "description": "book money on user account before withdraw operation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User account"
                ],
                "summary": "book",
                "parameters": [
                    {
                        "description": "User id, money to book amount",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.bookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structures.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/deposit": {
            "put": {
                "description": "top up the user's balance by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User account"
                ],
                "summary": "deposit",
                "parameters": [
                    {
                        "description": "User from whom this money, User to whom this money, order id, services id, money amount",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.transferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structures.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/report/{month}/{year}": {
            "get": {
                "description": "create report CSV file with indicating the amount of revenue for each services, return url for the file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounting"
                ],
                "summary": "report",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Month",
                        "name": "month",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Year",
                        "name": "year",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/transactions/{id}/{order}": {
            "get": {
                "description": "get list of the transactions for user. User can set order by date or amount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User account"
                ],
                "summary": "transactions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "a way to sort order",
                        "name": "order",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structures.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/unbook": {
            "put": {
                "description": "unbook money on user account if withdraw fall",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User account"
                ],
                "summary": "unbook",
                "parameters": [
                    {
                        "description": "User id, money to unbook amount",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.bookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structures.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/withdraw": {
            "put": {
                "description": "debiting money from a separate account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User account"
                ],
                "summary": "withdraw",
                "parameters": [
                    {
                        "description": "User from whom this money, User to whom this money, order id, services id, money amount",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal.transferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structures.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        }
    },
    "definitions": {
        "internal.bookRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "internal.transferRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "fromuserid": {
                    "type": "integer"
                },
                "orderid": {
                    "type": "integer"
                },
                "serviceid": {
                    "type": "integer"
                },
                "touserid": {
                    "type": "integer"
                }
            }
        },
        "structures.Order": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "fromuserid": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "orderid": {
                    "type": "integer"
                },
                "serviceid": {
                    "type": "integer"
                },
                "touserid": {
                    "type": "integer"
                }
            }
        },
        "structures.User": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "bookamount": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Avito Backend Test Task",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
